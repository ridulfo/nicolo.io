---
import MainLayout from "@layouts/MainLayout.astro";

const files = await Astro.glob("./writing/*.md");
const posts = files
  .map((file) => ({
    postName: file.getHeadings()[0].text,
    date: file.file
      .split("/")
      .reduce((_, curr) => curr, "") // last item in array
      .split("-")
      .slice(0, 3)
      .join("-"),
    url: file.url,
  }))
  .reverse();
---

<MainLayout>
    <a href="/1kb" style="font-size:0.7rem">&lt;1kb curriculum</a>
  <h2>Recent writing</h2>
  <ul>
    {
    posts.slice(0,5).map((post) => (
        <li>
          {post.date} - <a href={post.url}>{post.postName}</a>
        </li>
      ))
    }
  </ul>
  <a href="/writing">All writing</a>
    <h2>Recent Projects</h2>
    <h3><a href="https://github.com/ridulfo/nino-lang">nino-lang</a></h3>
    <p>
      Nino-lang is designed to be lightweight and efficient, with a focus on
      essential features to enable a wide range of functionalities without
      unnecessary complexity. The language is designed to support a minimal type
      system, first-class functions, and arrays, and is permissive with side
      effects, avoiding the need for monads. The full design has not been
      implemented and the language is currently interpreted, but the ultimate
      goal is to implement a self-hosting compiler. The project has reached a
      state where it supports a modest set of language features.
    </p>
    <h3><a href="https://github.com/ridulfo/ai-tools">ai-tools</a></h3>
    <p>
    A collection of powerful AI-driven tools that follow "the Unix philosophy",
    i.e. small composable programs that do one thing and they do it well.

      <br />
      <a href="https://nicolo.se/writing/2023-12-29-unix-style-ai-programs.html"
        >See this post for a demostration</a
      >
    </p>
  <a href="/projects">All projects</a>
</MainLayout>

<style>
  h3 {
    margin-bottom: 0;
  }
</MainLayout>

<style>
    ul {
      list-style: none;
      padding: 0;
    }
    li {
      margin-bottom: 1rem;
    }
</style>
